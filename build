#!/bin/bash

PROJECT="youpay-opencart-30x"
ZIP="${PROJECT}.zip"
TARGETDIR="upload"

######## Setup Functions #############
# prints colored text
print_style () {

    if [ "$2" == "info" ] ; then
        COLOR="96m";
    elif [ "$2" == "success" ] ; then
        COLOR="92m";
    elif [ "$2" == "warning" ] ; then
        COLOR="93m";
    elif [ "$2" == "danger" ] ; then
        COLOR="91m";
    else #default color
        COLOR="0m";
    fi

    STARTCOLOR="\e[$COLOR";
    ENDCOLOR="\e[0m";

    printf "$STARTCOLOR%b$ENDCOLOR" "$1";
}

################################################

print_style "===== YouPay OpenCart Build and Release =====\n" "danger";
echo "this will build and release this package for you"
printf "\n"
################################################

print_style "Preping...." "info"
rm -rf ${TARGETDIR}
print_style "." "info"
mkdir "${TARGETDIR}"
print_style ".\n" "info"

print_style "Copying all files" "info"
for file in *
do
  if [ "$file" != "$TARGETDIR" ] && [ "$file" != "vendor" ] && [ "$file" != "build" ] && [ "$file" != "$ZIP" ] && [ "$file" != "README.txt" ]
  then
    cp -r "$file" "$TARGETDIR/";
    print_style "." "success"
  elif [ "$file" == "README.txt" ]
  then
    cp -r "$file" ".";
    print_style "." "success"
  fi
done
print_style "âœ“" "success"
printf "\n"

cd $TARGETDIR || ( print_style "Changing Directory Failed" "error" && exit );

print_style "Installing Composer...\n" "info"

composer install --no-ansi --no-dev --no-interaction --no-plugins --no-progress --no-scripts --no-suggest --optimize-autoloader --classmap-authoritative &>/dev/null

print_style "Composer Installed\n" "success"
rm -rf composer.json
rm -rf composer.lock
cd ../

print_style "Zipping\n" "info"
zip -r $ZIP $TARGETDIR README.txt &>/dev/null
print_style "File Packaged Up Successfully\n" "success"

print_style "...cleaning up" "info"
rm -rf ${TARGETDIR}

print_style "\n\nBuild Completed:\n" "success"
print_style "./${ZIP}\n\n" "info"

echo ""
exit;